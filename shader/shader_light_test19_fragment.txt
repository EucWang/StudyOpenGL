#version 330 core

in vec3 ourNormal;
in vec3 FragPos;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;  //光源的位置
uniform vec3 viewPos;  //

out vec4 FragColor;

void main() {

	vec3 norm = normalize(ourNormal);
	vec3 lightDir = normalize(lightPos - FragPos);

	//两个向量之间的角度大于90度，点乘的结果就会变成负数，
	//max函数返回两个参数之间较大的参数，从而保证漫反射分量不会变成负数。
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;   //得到了漫反射的分量
	
	//--------------------------------------------------------------------------
	float ambientStrenght = 0.1;
	vec3 ambient = ambientStrenght * lightColor; //环境光照的分量

	//--------------------------------------------------------------------------
	float specularStrength = 0.5;
	vec3 viewDir = normalize(viewPos - FragPos);
	//reflect函数要求第一个向量是从光源指向片段位置的向量，
	//但是lightDir当前正好相反，是从片段指向光源（由先前我们计算lightDir向量时，减法的顺序决定）。
	//第二个参数要求是一个法向量，所以我们提供的是已标准化的norm向量。
	vec3 reflectDir = reflect(-lightDir, norm);  

	//先计算视线方向与反射方向的点乘（并确保它不是负值），然后取它的32次幂。
	//这个32是高光的反光度(Shininess)。
	//一个物体的反光度越高，反射光的能力越强，散射得越少，高光点就会越小。
	float spec = pow(max( dot( viewDir, reflectDir ), 0.0 ), 32); 

	vec3 specular = specularStrength * spec * lightColor; //镜面分量

	//vec3 result = ambient * objectColor;  
	//FragColor = vec4(lightColor * objectColor, 1.0f);
	//FragColor = vec4(result, 1.0f);

	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = vec4(result, 1.0);
}